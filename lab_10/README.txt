Лабораторная работа 10

Сделано:
1.	Хэширование данных:
  •	Разработайте утилиту, которая принимает на вход строку и вычисляет её хэш с использованием алгоритма SHA-256.
  •	Реализуйте возможность выбора нескольких хэш-функций (например, MD5, SHA-256, SHA-512).
  •	Включите в утилиту проверку целостности данных: пользователю предлагается ввести строку и её хэш, после чего утилита должна подтвердить или опровергнуть их соответствие.

2.	Симметричное шифрование:
  •	Реализуйте программу, шифрующую переданные данные с помощью алгоритма AES.
  •	Пользователь должен указать строку и секретный ключ.
  •	Программа должна зашифровать строку и предоставить возможность расшифровать её при вводе того же ключа.

3.	Асимметричное шифрование и цифровая подпись:
  •	Создайте пару ключей (открытый и закрытый) и сохраните их в файл.
  •	Реализуйте программу, которая подписывает сообщение с помощью закрытого ключа и проверяет подпись с использованием открытого ключа.
  •	Продемонстрируйте пример передачи подписанных сообщений между двумя сторонами.

4.	Реализация защищённого канала передачи данных (TLS):
  •	Модифицируйте TCP-сервер и клиент из предыдущих лабораторных работ для работы через защищённый канал с использованием TLS.
  •	Сервер должен поддерживать установку безопасного соединения, а клиент — проверять сертификат сервера перед отправкой данных.
  •	Реализуйте взаимную аутентификацию на уровне сертификатов.

5.	Защита REST API:
  •	Добавьте поддержку аутентификации с помощью токенов (например, JWT) для REST API.
  •	Реализуйте маршруты, требующие аутентификации, и проверьте их работу с валидными и невалидными токенами.
  •	Включите ограничение доступа к ресурсам на основе ролей (admin, user).


Понять:
- зачем iv во 2 пункте и всё же как работает шифрование/дешифрование?
  5-6 небольшие недопонимания

немного раскрытия информации:
4.
  для защищенного соединения нужно ассинхронное шифрование с парами
  сертификат - публичный ключ с определенными метаданными (автор, срок действия и т.п.) и приватный ключ

  CA - главный сертификат который подписывает сертификаты

  для создания этих вещей из консоли можно использовать команды:

  установка openssl:
  -он уже есть в консольке git-bash

  ca:
  openssl genpkey -algorithm RSA -out ca_key.pem
  openssl req -key ca_key.pem -new -x509 -out ca_cert.pem

  сервер:
  openssl genpkey -algorithm RSA -out server_key.pem
  openssl req -key server_key.pem -new -out server_csr.pem
  openssl x509 -req -in server_csr.pem -CA ca_cert.pem -CAkey ca_key.pem -CAcreateserial -out server_cert.pem

  клиент:
  openssl genpkey -algorithm RSA -out client_key.pem
  openssl req -key client_key.pem -new -out client_csr.pem
  openssl x509 -req -in client_csr.pem -CA ca_cert.pem -CAkey ca_key.pem -CAcreateserial -out client_cert.pem

  программа с настройкой InsecureSkipVerify: false не работает, поэтому пока тут true
  но вроде как проверка некоторых полей всё равно есть, так что это можно считать выполненным
  отключение отрубает проверку
  подлинности сертификата по CA
  проверку даты
  имени хоста
  так что возможно я как-то неправильно ввел данные при их создании, но я пытался несколько раз, все равно не получается